# Function without return
def hello() {
    print("Hello, world!");
}

assert(hello == hello);
assert(hello() == null);
assert(type(hello) == "function");
assert(type(hello()) == "null");

# Function with argument and return value
def revert(word) {
    let i = 0;
    let res = "";
    while (i < len(word)) {
        res = res + word[len(word) - i - 1];
        i = i + 1;
    }
    return res;
}

assert(revert("Hello") == "olleH");
assert(revert(revert("Foobar")) == "Foobar");

# Shadowing function name with a local name
def count(word, char) {
    let i = 0;
    let count = 0;
    while (i < len(word)) {
        if (word[i] == char) {
            count = count + 1;
        }
        i = i + 1;
    }
    return count;
}

assert(count("Hello", "a") == 0);
assert(count("Hello", "o") == 1);
assert(count("Hello", "l") == 2);

# Shadowing function name with an argument name
def foobar(foobar) {
    return foobar + 1;
}
assert(foobar(-1) == 0);
assert(foobar(4000) == 4001);

# Nested function calls
def count_vowels(word) {
    let i = 0;
    let c = 0;
    const vowels = "AEIOUYaeiouy";
    while (i < len(vowels)) {
        c = c + count(word, vowels[i]);
        i = i + 1;
    }
    return c;
}
assert(count_vowels("Foobar FOOBAZ") == 6);

# Nested function definitions
def f(a, b) {
    def product(x, y) {
        return x * y;
    }
    return product(a, b);
}

assert(f(5, 4) == 20);

# Creating new identifier
const count_char = count;
assert(count_char == count);
assert(count_char("Foobar", "o") == 2);

# Function arguments are references to objects
def double_array(array) {
    let i = 0;
    while (i < len(array)) {
        array[i] = array[i] * 2;
        i = i + 1;
    }
}
let array = [10, 20, 30];
double_array(array);
assert(array == [20, 40, 60]);
